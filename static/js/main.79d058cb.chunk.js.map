{"version":3,"sources":["api/api.js","componets/header/header.js","componets/card/card.js","componets/slider/slider.js","componets/character/character-detail.js","views/App.js","serviceWorker.js","index.js"],"names":["a","fetch","response","json","id","getAllCharacters","getCharacterById","Header","Card","props","className","onClick","character","Api","then","data","src","image","alt","Slider","useState","position","setPosition","items","cardList","map","e","i","key","handlerSliderArrow","arrow","lastIndex","length","listCard","document","querySelectorAll","index","scrollIntoView","behavior","inline","CharacterDetail","characterDetail","name","status","species","gender","origin","location","App","characterList","setCharacterList","setCharacterDetail","showSlider","setShowSlider","showDetail","setShowDetail","useEffect","ch","results","showCharacterDetail","Boolean","window","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.79d058cb.chunk.js","sourcesContent":["async function getAllCharacters() {\r\n    const response = await fetch('https://rickandmortyapi.com/api/character/');\r\n    return response.json();\r\n}\r\n\r\nasync function getCharacterById(id) {\r\n    const response = await fetch(`https://rickandmortyapi.com/api/character/${id}`);\r\n    return response.json();\r\n}\r\n\r\n\r\nexport default {\r\n    getAllCharacters,\r\n    getCharacterById\r\n}","import React from 'react'\nimport './header.css'\n\nfunction Header() {\n  return(\n    <header>\n      <h1>RICK AND MORTY</h1>\n      <p>GET API</p>\n    </header>\n  )\n}\n\nexport default Header;","import React from 'react'\nimport './card.css'\nimport Api from './../../api/api'\n\nfunction Card(props) {\n\n  function handlerCard(id) {\n    Api.getCharacterById(id).then((data) => {\n      props.onClick(data)\n    })\n  }\n\n  return(\n    <div className=\"Card\" onClick={() => handlerCard(props.character.id)}>\n      <picture className=\"Card-image\">\n        <img src={props.character.image} alt=\"description\"/>\n      </picture>\n    </div>\n  )\n\n}\n\nexport default Card;","import React, {useState} from 'react'\nimport './slider.css'\nimport Card from './../card/card'\n\nfunction Slider(props) {\n    \n  const [position, setPosition] = useState(0)\n  const {items, onClick} = props\n\n  const cardList = items.map((e, i) => \n    <Card \n      key={e.id} \n      character={items[i]}\n      onClick={onClick} />\n  );\n\n  function handlerSliderArrow(arrow) {\n    const lastIndex = items.length - 1\n    const listCard = document.querySelectorAll('.Card')\n    let index = null;\n    \n    if(arrow !== 1) {\n        index = (position === 0) ? lastIndex : position - 1;\n        listCard[index].scrollIntoView({behavior: 'smooth', inline: 'end'})\n    } else {\n        index = (position === lastIndex) ? 0 : position + 1;\n        listCard[index].scrollIntoView({behavior: 'smooth', inline: 'start'})\n    }\n    setPosition(index)\n  }\n\n  return(\n    <div className=\"Slider\">\n      <div className='Slider-list'>\n        {cardList}\n      </div>\n      <button \n        className=\"Slider-arrows Slider-prev\" \n        onClick={() => handlerSliderArrow(0)}>\n          &lt;\n      </button>\n      <button \n        className=\"Slider-arrows Slider-next\" \n        onClick={() => handlerSliderArrow(1)}>\n          &gt;\n      </button>\n    </div>\n  )\n\n}\n\nexport default Slider;","import React from 'react'\nimport './character-detail.css'\n\nfunction CharacterDetail(props) {\n\n  const {characterDetail} = props\n\n  function handlerClose() {\n    props.onClick()\n  }\n\n  return (\n    <div className=\"Character-detail\">\n      <div className=\"Character-content\">\n        <button className=\"Character-close\" onClick={handlerClose}>X</button>\n        <picture className=\"Character-avatar\">\n          <img src={characterDetail.image} alt={characterDetail.name}></img>\n        </picture>\n        <div className=\"Character-information\">\n          <div className=\"Character-information-content\">\n            <h2>{characterDetail.name}</h2>\n            <p><b>Estado:</b> {characterDetail.status}</p>\n            <p><b>Especie:</b> {characterDetail.species}</p>\n            <p><b>Género:</b> {characterDetail.gender}</p>\n            <p><b>Origen:</b> {characterDetail.origin.name}</p>\n            <p><b>Ubicación:</b> {characterDetail.location.name}</p>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n\n}\n\nexport default CharacterDetail;","import React, {useEffect, useState} from 'react';\nimport './App.css';\nimport Api from './../api/api';\nimport Header from './../componets/header/header'\nimport Slider from './../componets/slider/slider'\nimport Detail from './../componets/character/character-detail'\n\nfunction App() {\n  \n  const [characterList, setCharacterList] = useState([])\n  const [characterDetail, setCharacterDetail] = useState({})\n  const [showSlider, setShowSlider] = useState(false)\n  const [showDetail, setShowDetail] = useState(false)\n\n  useEffect(() => {\n    Api.getAllCharacters().then(({results}) => {\n      const ch = results.map(({id, name, image}) => {\n        return {id, name, image}\n      })\n      setCharacterList(ch)\n      setShowSlider(true) \n    })\n  })\n\n  function showCharacterDetail(data) {\n    setCharacterDetail(data)\n    setShowSlider(false)\n    setShowDetail(true)\n  }\n\n  function closeCharacterDetail() {\n    setCharacterDetail({})\n    setShowDetail(false)\n    setShowSlider(true)\n  }\n\n  return (\n    <div className=\"App\">\n      <section className=\"App-secction\">\n        <Header />\n        { showSlider ? (\n          <Slider \n            items={characterList}\n            onClick={(data) => showCharacterDetail(data)}\n          /> \n        ) : null }\n      </section>\n      { showDetail ? (\n          <Detail\n            characterDetail={characterDetail}\n            onClick={closeCharacterDetail}\n          />\n      ) : null }\n    </div>\n  )\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './views/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}